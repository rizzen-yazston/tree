= Tree
Rizzen Yazston

Welcome to the Tree project.

A simple generic tree structure containing data nodes. The `tree` crate provides the `Tree` struct, which can store data that implements the `Any` trait. Methods are provided for the manipulation of the tree structure, and obtaining information regarding the tree structure and its nodes. Manipulating the data of the nodes is done by one method `data_mut`, which simply provides a mutable reference to the vector containing the data. `data` method is just an immutable reference if reading is only required. There is also a field of the node for specifying the type of node stored in the tree, though it is not used internally by the various `Tree` methods. It can be read, and any type can be used if it implements the `Any` trait.

The repository contains only the `tree` crate.

Note:: The crate on `crates.io` has its name appended with the suffix `-rizzen-yazston` to distinguish them from other tree creates by other authors.

== Usage

Simply include the `tree-rizzen-yazston` crate in the `Cargo.toml` to make it available to the application or library. Due to its simple design there is no configuration required.

=== Cargo.toml

```
[dependencies]
tree-rizzen-yazston = "0.3.0"
```

=== Examples

```
use tree::{NodeFeatures, Tree};

enum Nodes {
    Root,
    Statement,
    Equal,
    Divide,
    Add,
    Leaf,
}

let mut tree = Tree::new();
let no_data = NodeFeatures { allow_children: true, allow_data: false };
let variable = NodeFeatures { allow_children: false, allow_data: true };

// Build tree of one statement: z = (x + y) / 2
// Just ignoring the `Result` using .ok() as this is a trivial example.
let mut index = tree.insert( 300, no_data.clone(), Box::new( Nodes::Root ) ).unwrap();
tree.insert( index, no_data.clone(), Box::new( Nodes::Statement ) ).ok();
tree.insert( 1, no_data.clone(), Box::new( Nodes::Equal ) ).ok();
index = tree.insert( 2, variable.clone(), Box::new( Nodes::Leaf ) ).unwrap();
tree.data_mut( index ).unwrap().push( Box::new( "z".to_string() ) );
tree.insert( 2, no_data.clone(), Box::new( Nodes::Divide ) ).ok();
tree.insert( 4, no_data.clone(), Box::new( Nodes::Add ) ).ok();
index = tree.insert( 5, variable.clone(), Box::new( Nodes::Leaf ) ).unwrap();
tree.data_mut( index ).unwrap().push( Box::new( "x".to_string() ) );
index = tree.insert( 5, variable.clone(), Box::new( Nodes::Leaf ) ).unwrap();
tree.data_mut( index ).unwrap().push( Box::new( "y".to_string() ) );
index = tree.insert( 4, variable.clone(), Box::new( Nodes::Leaf ) ).unwrap();
tree.data_mut( index ).unwrap().push( Box::new( "2".to_string() ) );
assert_eq!( tree.count(), 9, "9 nodes are present." );
```

 